üìå Estado Maestro del Proyecto ‚Äî StudyForge (Resumen extendido)
üéØ Objetivo general
StudyForge es una aplicaci√≥n web para gesti√≥n y apoyo en estudios, que integrar√° componentes de IA para enriquecer el trabajo con documentos (por ejemplo: extracci√≥n de informaci√≥n clave, b√∫squeda inteligente, res√∫menes, preguntas generadas autom√°ticamente).
El proyecto debe ser innovador, factible en 3 semanas, y demostrar un uso claro de IA integrado en una aplicaci√≥n real.
________________________________________
üõ†Ô∏è Stack Tecnol√≥gico
Backend
‚Ä¢	Lenguaje: Python 3.11.x
‚Ä¢	Framework: FastAPI (ligero, moderno, soporte autom√°tico de validaci√≥n + docs).
‚Ä¢	Servidor: Uvicorn (ASGI).
‚Ä¢	Base de datos: PostgreSQL 15 (a√∫n pendiente integrar).
‚Ä¢	ORM: SQLAlchemy (planificado).
‚Ä¢	Migraciones: Alembic (planificado).
‚Ä¢	Validaci√≥n: Pydantic v2.11.
Frontend
‚Ä¢	Lenguaje: JavaScript/TypeScript (decisi√≥n final pendiente).
‚Ä¢	Framework: React.
‚Ä¢	Estilos: TailwindCSS (planificado, ya discutido).
‚Ä¢	Gesti√≥n de paquetes: Node.js LTS (22.x).
Infraestructura
‚Ä¢	Control de versiones: Git + GitHub.
‚Ä¢	Ramas activas: main, feat/walking-skeleton.
‚Ä¢	Colaboraci√≥n:
o	Repo StudyForge ‚Üí c√≥digo fuente.
o	Repo Capstone ‚Üí documentaci√≥n, diagramas, informes acad√©micos.
IA (por integrar)
‚Ä¢	Carpeta reservada en backend/app/ai/.
‚Ä¢	Subcarpetas preparadas: pipelines, models, prompts, vectorstore.
‚Ä¢	Plan:
o	Procesamiento de documentos en base a embeddings.
o	Generaci√≥n de res√∫menes y preguntas.
o	Posible uso de un modelo externo (OpenAI API u otro).
________________________________________
üìÇ Estructura actual del c√≥digo
StudyForge/
  backend/
    app/
      __init__.py
      main.py
      routers/
        __init__.py
        health.py
        documents.py
      schemas/
        __init__.py
        document_schemas.py
      services/
        __init__.py
        document_service.py
      repositories/
        __init__.py
        document_repo.py
      ai/
        __init__.py
        pipelines/__init__.py
        models/__init__.py
        prompts/__init__.py
        vectorstore/__init__.py
    requirements.txt
  frontend/          (pendiente iniciar)
  docs/              (podemos usarlo para progreso t√©cnico interno)
  .vscode/settings.json  ‚Üí usa `backend/.venv` como int√©rprete
  README.md
________________________________________
‚úÖ Lo implementado hasta ahora
1. Entorno
‚Ä¢	Python 3.11.x configurado en venv (backend/.venv).
‚Ä¢	Dependencias instaladas: fastapi, uvicorn, pydantic.
‚Ä¢	VS Code configurado para usar siempre el int√©rprete del venv.
2. Git/GitHub
‚Ä¢	Configuraci√≥n SSH lista.
‚Ä¢	Remote origin ‚Üí StudyForge.
‚Ä¢	Remote upstream ‚Üí repositorio original del grupo.
‚Ä¢	Rama activa: feat/walking-skeleton.
3. Commits importantes
‚Ä¢	feat(api): add FastAPI health endpoint
‚Ä¢	refactor(api): move /health to APIRouter and include in main
‚Ä¢	chore(api): add base app package structure
‚Ä¢	feat(documents): scaffold routers/schemas/service/repo (in-memory)
4. Backend funcional
‚Ä¢	/health ‚Üí endpoint b√°sico de estado.
‚Ä¢	/documents (in-memory):
o	GET /documents ‚Üí devuelve lista de documentos.
o	POST /documents ‚Üí recibe title y content (y opcional description), crea documento con ID autoincremental.
o	Valida autom√°ticamente entradas y devuelve errores claros (422 ValidationError).
‚Ä¢	Swagger UI (/docs) funcionando con modelos generados:
o	DocumentIn, DocumentOut, DocumentListOut.
o	HTTPValidationError (generado por FastAPI).
5. Arquitectura en capas (implementada)
‚Ä¢	Routers: definen endpoints y agrupan por dominio.
‚Ä¢	Services: l√≥gica de negocio (intermediario entre router y repositorio).
‚Ä¢	Repositories: acceso a datos (ahora en memoria, luego PostgreSQL).
‚Ä¢	Schemas: validaci√≥n de entrada/salida con Pydantic.
‚Ä¢	AI (stub): carpeta lista para integrar IA en el futuro.
________________________________________
‚è≠Ô∏è Pr√≥ximos pasos
1.	Persistencia con PostgreSQL
o	Instalar sqlalchemy y psycopg[binary].
o	Crear archivo db.py para conexi√≥n.
o	Definir modelo Document en SQLAlchemy.
o	Migrar DocumentRepo a Postgres.
2.	Migraciones
o	Configurar Alembic para poder evolucionar la base de datos.
3.	Frontend m√≠nimo
o	Crear app React en frontend/.
o	Conectar con endpoints del backend.
4.	Integraci√≥n IA
o	Procesamiento de documentos (embeddings).
o	Funciones de resumen, b√∫squeda y generaci√≥n de preguntas.
o	APIs expuestas desde /ai/.
________________________________________
üí° Notas adicionales importantes
‚Ä¢	Capstone repo: se mantiene para documentaci√≥n, no para c√≥digo.
‚Ä¢	StudyForge repo: toda la l√≥gica y desarrollo van aqu√≠.
‚Ä¢	Swagger UI: ser√° una herramienta vital para probar el backend sin necesidad del frontend mientras se construye.
‚Ä¢	Entorno virtual: siempre debe estar activado antes de correr o instalar dependencias (.\.venv\Scripts\Activate.ps1).
‚Ä¢	Commits: estamos cuidando los mensajes (convenci√≥n feat, chore, refactor) ‚Üí esto hace el historial m√°s claro y profesional.
‚Ä¢	Arquitectura: esta separaci√≥n temprana (routers/services/repositories/schemas) nos asegura que cuando llegue la IA y la DB, no tengamos que reestructurar el proyecto.
